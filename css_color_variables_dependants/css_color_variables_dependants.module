<?php

/**
 * @file
 * Allows css variables derived from the color module colors.
 */

use Symfony\Component\Yaml\Yaml;
use Drupal\Component\Utility\NestedArray;

/**
 * Append color variations to given colors.
 *
 * @param array $colors
 *   Color palette array.
 * @param string $theme
 *   Theme machine name.
 */
function css_color_variables_dependants_css_color_variables_alter(array &$colors, string $theme) {
  // Look for yourtheme_css_variable_dependants.yml.
  $path = DRUPAL_ROOT . '/' . drupal_get_path('theme', $theme) . '/color/css_color_variables_dependants.yml';
  if (file_exists($path)) {
    try {
      $conf = Yaml::parseFile($path);
      $color_derivates = $conf['colors'];
      if ($color_derivates && count($color_derivates)) {
        foreach ($color_derivates as $set) {
          if (isset($colors[$set['name']])) {
            $color = $set['name'];
            $variants = isset($set['variants']) ? NestedArray::mergeDeep($conf['default_variants'], $set['variants']) : $conf['default_variants'];
            foreach ($variants as $derivate) {
              $action_id = key($derivate);
              $val = $derivate[$action_id];
              if (!preg_match('/^(100|[1-9]?[0-9])$/', $val)) {
                throw new \Exception('Color action value must be integer value in range 0-100 [5]' . $val . ' is invalid.');
              }
              $derivate = css_color_variables_dependants_derivate_name($color, $action_id, $val);
              if (isset($colors[$derivate])) {
                throw new \Exception('Color variant ' . $derivate . ' already defined');
              }
              // Any action
              // Can be in active theme or here.
              $default_action = 'css_color_variables_dependants_action_' . $action_id;
              if (function_exists($theme . '_action_' . $action_id)) {
                $colors[$derivate] = call_user_func($theme . '_action_' . $action_id, $colors[$color], $val);
              }
              elseif (function_exists($default_action)) {
                $colors[$derivate] = call_user_func($default_action, $colors[$color], $val);
              }
              else {
                throw new \Exception('Color variant action ' . $default_action . ' not implemented.');
              }
            }
          }
        }
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('css_color_variables_dependants_css_color_variables_alter')->error($e->getMessage());
    }
  }
}

/**
 *
 */
function css_color_variables_dependants_derivate_name(string $color, string $action, string $val) {
  return $color . '__' . $action . '_' . $val;
}

/**
 *
 */
function css_color_variables_dependants_action_darken(string $color, string $percent) {
  $steps = -1 * $percent / 100;
  return css_color_variables_dependants_adjust_brightness($color, $steps);
}

/**
 * Action lighten [0-100]
 */
function css_color_variables_dependants_action_lighten(string $color, string $percent) {
  $steps = $percent / 100;
  return css_color_variables_dependants_adjust_brightness($color, $steps);
}

/**
 * Action opacity.
 *
 * @param string $color
 *   Hex color.
 *
 * @param int $percent
 *   Opacity [0-100].
 */
function css_color_variables_dependants_action_opacity(string $color, string $percent) {
  $hex = dechex(intval(255 / 100 * $percent));
  $hex = strlen($hex) === 1 ? "0$hex" : $hex;
  return $color . $hex;
}

/**
 * Adjust brightness.
 *
 * Increases or decreases the brightness of a color by a percentage
 * of the current brightness.
 *
 * @see https://stackoverflow.com/a/54393956/308533
 *
 * @param string $hexCode
 *   Supported formats: `#FFF`, `#FFFFFF`, `FFF`, `FFFFFF`.
 *
 * @param float $adjustPercent
 *   A number between -1 and 1. E.g. 0.3 = 30% lighter; -0.4 = 40% darker.
 *
 * @return string
 */
function css_color_variables_dependants_adjust_brightness(string $hexCode, float $adjustPercent) {
  $hexCode = ltrim($hexCode, '#');

  if (strlen($hexCode) == 3) {
    $hexCode = $hexCode[0] . $hexCode[0] . $hexCode[1] . $hexCode[1] . $hexCode[2] . $hexCode[2];
  }

  $hexCode = array_map('hexdec', str_split($hexCode, 2));

  foreach ($hexCode as & $color) {
    $adjustableLimit = $adjustPercent < 0 ? $color : 255 - $color;
    $adjustAmount = ceil($adjustableLimit * $adjustPercent);

    $color = str_pad(dechex($color + $adjustAmount), 2, '0', STR_PAD_LEFT);
  }
  return '#' . implode($hexCode);
}


function my_remap ($array) {
  $mapped = [];
  foreach ($array as $i => $set) {
    if (!isset($mapped[key($set)])) {
      $mapped[key($set)] = [];
    }
    if (!isset($mapped[key($set)][$array[$i][key($set)]])) {
      $mapped[key($set)][] = $array[$i][key($set)];
    }
  }
  return $mapped;
}
