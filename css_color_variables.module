<?php

/**
 * @file
 * Render current theme color variables as CSS vars in HTML header.
 */

/**
 * Implements hook_preprocess_html().
 */
function css_color_variables_preprocess_html(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('color')) {
    $colors = css_color_variables_get_palette();
    if ($colors) {
      // Add node id to the body class.
      $variables['attributes']['class'][] = 'has-css-color-variables';
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function css_color_variables_page_attachments_alter(array &$page) {

  if (\Drupal::moduleHandler()->moduleExists('color')) {

    $colors = css_color_variables_get_palette();
    if ($colors) {
      $theme = \Drupal::service('theme.manager')->getActiveTheme();
      /* @var $conf \Drupal\Core\Config\ImmutableConfig */
      $conf = Drupal::config('color.theme.' . $theme->getName());

      // Add CSS color variables.
      $page['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          '#value' => css_color_variables_create_css_vars($colors),
        ],
        $theme->getName(),
      ];
      // Cache.
      if (isset($page['#cache']['tags'])) {
        $page['#cache']['tags'] = array_merge(
          $page['#cache']['tags'],
          $conf->getCacheTags(),
          ['config.system.theme']
        );
      }
      else {
        $page['#cache']['tags'] = array_merge($conf->getCacheTags(), ['config.system.theme']);
      }
    }
  }
}

/**
 * Gets current themes colors.
 */
function css_color_variables_get_palette():?array {
  $theme = \Drupal::service('theme.manager')->getActiveTheme();
  if (color_get_info($theme->getName())) {
    $colors = color_get_palette($theme->getName());
    // Allow modules to alter the color palette.
    // Provides hook_css_color_variables_alter(&$colors, $theme_name).
    \Drupal::moduleHandler()->invokeAll('css_color_variables_alter', [&$colors, $theme->getName()]);
    return $colors;
  }
  return NULL;
}

/**
 * Color palette as root css variables.
 *
 * @param array $palette
 *   Drupal color module palette.
 *
 * @return string
 *   CSS code.
 */
function css_color_variables_create_css_vars(array $palette) : string {
  ksort($palette, SORT_NATURAL);
  $css = [];
  $css[] = '.has-css-color-variables {';
  foreach ($palette as $color => $value) {
    $css[] = '  --' . str_replace('_', '-', $color) . ': ' . $value . ';';
  }
  $css[] = '}';
  return implode(PHP_EOL, $css);
}

